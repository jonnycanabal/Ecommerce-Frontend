{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BASE_ENDPOINT } from '../config/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductoService {\n  constructor(http) {\n    this.http = http;\n    this.baseEndpoint = BASE_ENDPOINT;\n    this.productoEndpoint = '/crear';\n    this.cabeceras = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  listar() {\n    return this.http.get(this.baseEndpoint);\n  }\n  ver(id) {\n    return this.http.get(`${this.baseEndpoint}/ver/${id}`);\n  }\n  crear(producto) {\n    const url = this.baseEndpoint + this.productoEndpoint;\n    return this.http.post(url, producto, {\n      headers: this.cabeceras\n    });\n    //return this.http.post<Producto>(this.baseEndpoint, producto, {headers: this.cabeceras})\n  }\n\n  editar(producto) {\n    const url = this.baseEndpoint + \"/editar/\" + producto.id;\n    return this.http.put(url, producto, {\n      headers: this.cabeceras\n    });\n  }\n  eliminar(id) {\n    const url = this.baseEndpoint + \"/eliminar/\" + id;\n    return this.http.delete(url);\n  }\n  crearConFoto(producto, archivo) {\n    const formData = new FormData();\n    //en el form data se tiene que pasar los parametros del producto\n    formData.append('archivo', archivo);\n    formData.append('nombre', producto.nombre.toString());\n    formData.append('apellido', producto.marca.toString());\n    formData.append('precio', producto.precio.toString());\n    return this.http.post(this.baseEndpoint + \"/crear-con-foto\", formData);\n  }\n  editarConFoto(producto, archivo) {\n    const formData = new FormData();\n    //en el form data se tiene que pasar los parametros del producto\n    formData.append('archivo', archivo);\n    //se realizo un cast a toString debido a que como es de tipo blob la imagen debe recibir argumentos string o blob.\n    formData.append('nombre', producto.nombre);\n    formData.append('apellido', producto.marca);\n    formData.append('precio', producto.precio.toString());\n    return this.http.put(this.baseEndpoint + \"/editar-con-foto/\" + producto.id, formData);\n  }\n  static #_ = this.ɵfac = function ProductoService_Factory(t) {\n    return new (t || ProductoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductoService,\n    factory: ProductoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BASE_ENDPOINT","ProductoService","constructor","http","baseEndpoint","productoEndpoint","cabeceras","listar","get","ver","id","crear","producto","url","post","headers","editar","put","eliminar","delete","crearConFoto","archivo","formData","FormData","append","nombre","toString","marca","precio","editarConFoto","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mao_9\\Documents\\Cursos\\Practica\\AplicativoEcommerce\\AplicativoEcommerce\\src\\app\\services\\producto.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Producto } from '../models/producto';\nimport { BASE_ENDPOINT } from '../config/app';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductoService {\n\nprivate baseEndpoint = BASE_ENDPOINT\nprivate productoEndpoint = '/crear'\n\n  private cabeceras: HttpHeaders = new HttpHeaders({'Content-Type': 'application/json'})\n\n  constructor(private http: HttpClient) { }\n\n  public listar(): Observable<Producto[]>{\n    return this.http.get<Producto[]>(this.baseEndpoint);\n  }\n\n  public ver (id: number): Observable<Producto>{\n    return this.http.get<Producto>(`${this.baseEndpoint}/ver/${id}`);\n  }\n\n  public crear(producto:Producto): Observable<Producto>{\n    const url = this.baseEndpoint + this.productoEndpoint;\n    return this.http.post<Producto>(url, producto, {headers: this.cabeceras});\n    //return this.http.post<Producto>(this.baseEndpoint, producto, {headers: this.cabeceras})\n  }\n\n  public editar(producto:Producto): Observable<Producto>{\n    const url = this.baseEndpoint + \"/editar/\"+producto.id;\n    return this.http.put<Producto>(url, producto, {headers: this.cabeceras});\n  }\n  \n  public eliminar (id: number): Observable<void>{\n    const url= this.baseEndpoint + \"/eliminar/\"+ id;\n    return this.http.delete<void>(url)\n  }\n\n  public crearConFoto(producto: Producto, archivo: File): Observable<Producto>{\n    const formData = new FormData();\n    //en el form data se tiene que pasar los parametros del producto\n    formData.append('archivo', archivo);\n    formData.append('nombre', producto.nombre.toString());\n    formData.append('apellido', producto.marca.toString());\n    formData.append('precio', producto.precio.toString());\n    return this.http.post<Producto>(this.baseEndpoint + \"/crear-con-foto\", formData);\n  }\n\n  public editarConFoto(producto: Producto, archivo: File): Observable<Producto>{\n    const formData = new FormData();\n    //en el form data se tiene que pasar los parametros del producto\n    formData.append('archivo', archivo);\n    //se realizo un cast a toString debido a que como es de tipo blob la imagen debe recibir argumentos string o blob.\n    formData.append('nombre', producto.nombre);\n    formData.append('apellido', producto.marca);\n    formData.append('precio', producto.precio.toString());\n    return this.http.put<Producto>(this.baseEndpoint + \"/editar-con-foto/\" + producto.id, formData);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}